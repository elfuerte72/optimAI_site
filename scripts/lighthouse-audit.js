#!/usr/bin/env node

/**
 * Lighthouse Audit Script –¥–ª—è OptimaAI
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ó–∞–ø—É—Å–∫–∞–µ—Ç Next.js —Å–µ—Ä–≤–µ—Ä –≤ production —Ä–µ–∂–∏–º–µ
 * 2. –í—ã–ø–æ–ª–Ω—è–µ—Ç Lighthouse –∞—É–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç –≤ –ø–∞–ø–∫–µ reports/
 * 4. –í—ã–≤–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run lighthouse:build  - —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç
 * npm run lighthouse        - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏)
 */

const fs = require('fs');
const path = require('path');
const { spawn, exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  url: 'http://localhost:3000',
  port: 3000,
  outputDir: 'reports',
  reportName: `lighthouse-report-${new Date().toISOString().split('T')[0]}.html`
};

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
function ensureReportsDir() {
  const reportsPath = path.join(process.cwd(), CONFIG.outputDir);
  if (!fs.existsSync(reportsPath)) {
    fs.mkdirSync(reportsPath, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${CONFIG.outputDir}/`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function waitForServer(url, timeout = 30000) {
  const start = Date.now();
  
  while (Date.now() - start < timeout) {
    try {
      const response = await fetch(url);
      if (response.ok) {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: ${url}`);
        return true;
      }
    } catch (error) {
      // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  throw new Error(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ ${timeout}ms: ${url}`);
}

// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
async function killPortProcess(port) {
  try {
    const { stdout } = await execAsync(`lsof -ti:${port}`);
    if (stdout.trim()) {
      const pids = stdout.trim().split('\n');
      for (const pid of pids) {
        await execAsync(`kill -9 ${pid}`);
        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å ${pid} –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      }
      // –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  } catch (error) {
    // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }
}

// –ó–∞–ø—É—Å–∫ Next.js —Å–µ—Ä–≤–µ—Ä–∞
function startNextServer() {
  return new Promise((resolve, reject) => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Next.js —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const server = spawn('npm', ['start'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: true
    });

    let serverReady = false;

    server.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`[Next.js] ${output.trim()}`);
      
      if (output.includes('Ready') || output.includes('started server')) {
        serverReady = true;
        resolve(server);
      }
    });

    server.stderr.on('data', (data) => {
      const error = data.toString();
      console.error(`[Next.js Error] ${error.trim()}`);
    });

    server.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`));
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(() => {
      if (!serverReady) {
        server.kill();
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Next.js —Å–µ—Ä–≤–µ—Ä–∞'));
      }
    }, 15000);
  });
}

// –ó–∞–ø—É—Å–∫ Lighthouse —á–µ—Ä–µ–∑ CLI
async function runLighthouse() {
  console.log('üîç –ó–∞–ø—É—Å–∫ Lighthouse –∞—É–¥–∏—Ç–∞...');
  
  const reportPath = path.join(process.cwd(), CONFIG.outputDir, CONFIG.reportName);
  
  const lighthouseCmd = [
    'npx lighthouse',
    CONFIG.url,
    '--output=html',
    '--output=json',
    `--output-path=${reportPath.replace('.html', '')}`,
    '--only-categories=performance,seo,accessibility,best-practices',
    '--form-factor=desktop',
    '--throttling-method=devtools',
    '--screenEmulation.mobile=false',
    '--screenEmulation.width=1350',
    '--screenEmulation.height=940',
    '--chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"',
    '--quiet'
  ].join(' ');

  try {
    const { stdout, stderr } = await execAsync(lighthouseCmd);
    
    if (stderr && !stderr.includes('ChromeLauncher')) {
      console.warn('‚ö†Ô∏è Lighthouse warnings:', stderr);
    }
    
    return {
      htmlPath: `${reportPath.replace('.html', '.report.html')}`,
      jsonPath: `${reportPath.replace('.html', '.report.json')}`
    };
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Lighthouse: ${error.message}`);
  }
}

// –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ JSON –æ—Ç—á–µ—Ç–∞
async function displayResults(jsonPath) {
  try {
    if (!fs.existsSync(jsonPath)) {
      console.log('üìä HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ JSON –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    const reportData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
    const categories = reportData.categories;
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ LIGHTHOUSE –ê–£–î–ò–¢–ê');
    console.log('================================');
    console.log(`üìç URL: ${reportData.finalUrl}`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∞—É–¥–∏—Ç–∞: ${new Date(reportData.fetchTime).toLocaleString('ru-RU')}`);
    console.log('\nüìà –û–¶–ï–ù–ö–ò:');
    
    Object.keys(categories).forEach(categoryId => {
      const category = categories[categoryId];
      const score = Math.round(category.score * 100);
      const emoji = score >= 90 ? 'üü¢' : score >= 50 ? 'üü°' : 'üî¥';
      console.log(`${emoji} ${category.title}: ${score}/100`);
    });

    // –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (categories.performance) {
      console.log('\n‚ö° –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
      const audits = reportData.audits;
      
      const metrics = [
        { key: 'first-contentful-paint', name: 'First Contentful Paint' },
        { key: 'largest-contentful-paint', name: 'Largest Contentful Paint' },
        { key: 'cumulative-layout-shift', name: 'Cumulative Layout Shift' },
        { key: 'total-blocking-time', name: 'Total Blocking Time' },
        { key: 'speed-index', name: 'Speed Index' }
      ];

      metrics.forEach(metric => {
        const audit = audits[metric.key];
        if (audit && audit.displayValue) {
          console.log(`   ${metric.name}: ${audit.displayValue}`);
        }
      });
    }

    // SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (categories.seo && categories.seo.score < 0.9) {
      console.log('\nüîç SEO –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      const seoAudits = reportData.audits;
      const failedSeoAudits = Object.keys(seoAudits)
        .filter(key => seoAudits[key].score !== null && seoAudits[key].score < 1)
        .slice(0, 5);
      
      failedSeoAudits.forEach(auditKey => {
        const audit = seoAudits[auditKey];
        if (audit.title && audit.description) {
          console.log(`   ‚ö†Ô∏è  ${audit.title}`);
        }
      });
    }

    console.log('\n‚ú® –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.log('üìä HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  let server = null;
  
  try {
    console.log('üéØ –ó–∞–ø—É—Å–∫ Lighthouse –∞—É–¥–∏—Ç–∞ –¥–ª—è OptimaAI');
    console.log('=========================================\n');

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    ensureReportsDir();

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç –µ—Å–ª–∏ –∑–∞–Ω—è—Ç
    await killPortProcess(CONFIG.port);

    // –ó–∞–ø—É—Å–∫–∞–µ–º Next.js —Å–µ—Ä–≤–µ—Ä
    server = await startNextServer();
    
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await waitForServer(CONFIG.url);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Lighthouse
    const { htmlPath, jsonPath } = await runLighthouse();
    
    console.log(`üìä HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${htmlPath}`);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await displayResults(jsonPath);
    
    console.log(`\nüìÅ –û—Ç–∫—Ä–æ–π—Ç–µ –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: file://${htmlPath}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞:', error.message);
    process.exit(1);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    if (server) {
      console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
      server.kill();
      
      // –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { main, CONFIG };