import { NextResponse } from 'next/server';

interface SignUpRequestBody {
  name?: string;
  contact?: string;
  service?: string;
  comment?: string;
}

// Helper function to escape markdown V2 characters for Telegram
function escapeMarkdownV2(text: string): string {
  const ESCAPE_CHARS = /[_*\[\]()~`>#+\-=|{}.!]/g;
  return text.replace(ESCAPE_CHARS, '\\$&');
}

export async function POST(request: Request) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error('Telegram Bot Token or Chat ID not configured in environment variables.');
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.' }, 
      { status: 500 }
    );
  }

  try {
    const body: SignUpRequestBody = await request.json();
    const { name, contact, service, comment } = body;

    if (!name || !contact || !service) {
      return NextResponse.json(
        { error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –ò–º—è, –ö–æ–Ω—Ç–∞–∫—Ç –∏ –£—Å–ª—É–≥–∞.' }, 
        { status: 400 }
      );
    }

    // Construct the message for Telegram
    let messageText = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ Optima AI* üîî\n\n`;
    messageText += `*–ò–º—è:* ${escapeMarkdownV2(name)}\n`;
    messageText += `*–ö–æ–Ω—Ç–∞–∫—Ç:* ${escapeMarkdownV2(contact)}\n`;
    messageText += `*–£—Å–ª—É–≥–∞:* ${escapeMarkdownV2(service)}\n`;
    if (comment && comment.trim() !== '') {
      messageText += `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${escapeMarkdownV2(comment)}\n`;
    }
    messageText += `\n_–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ._`;
    
    const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

    const telegramResponse = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: messageText,
        parse_mode: 'MarkdownV2',
      }),
    });

    const telegramResult = await telegramResponse.json();

    if (!telegramResponse.ok || !telegramResult.ok) {
      console.error('Telegram API Error:', telegramResult);
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.' }, 
        { status: 500 }
      );
    }

    return NextResponse.json({ message: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.' });

  } catch (error) {
    console.error('Error in /api/signup-telegram:', error);
    if (error instanceof SyntaxError) {
        return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.' }, { status: 400 });
    }
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.' }, { status: 500 });
  }
} 