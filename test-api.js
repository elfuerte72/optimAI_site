#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —á–∞—Ç-–±–æ—Ç–∞
 */

const http = require('http');

// –¢–µ—Å—Ç health endpoint
async function testHealth() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/health...');
  
  return new Promise((resolve, reject) => {
    const req = http.request('http://localhost:3000/api/health', {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        console.log(`Response: ${data}`);
        resolve(res.statusCode === 200);
      });
    });
    
    req.on('error', (err) => {
      console.error('–û—à–∏–±–∫–∞:', err.message);
      reject(err);
    });
    
    req.end();
  });
}

// –¢–µ—Å—Ç chat endpoint
async function testChat() {
  console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/chat —Å –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ OptimaAI' }
    ]
  });
  
  return new Promise((resolve, reject) => {
    const req = http.request('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': 'api_optimaai',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        try {
          const response = JSON.parse(data);
          if (response.message && response.message.content) {
            console.log(`‚úÖ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${response.message.content.substring(0, 100)}..."`);
            resolve(true);
          } else {
            console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:`, response);
            resolve(false);
          }
        } catch (e) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, data);
          resolve(false);
        }
      });
    });
    
    req.on('error', (err) => {
      console.error('–û—à–∏–±–∫–∞:', err.message);
      reject(err);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API OptimaAI Chat Bot\n');
  
  try {
    const healthOk = await testHealth();
    const chatOk = await testChat();
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`Health API: ${healthOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`Chat API: ${chatOk ? '‚úÖ' : '‚ùå'}`);
    
    if (healthOk && chatOk) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.');
      console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: npm run dev');
      console.log('2. –ó–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥: cd backend && python main.py');
      console.log('3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–∞ http://localhost:8000');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

runTests();