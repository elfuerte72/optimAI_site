#!/usr/bin/env node

/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å API
 */

const http = require('http');

console.log('üîç –û—Ç–ª–∞–¥–∫–∞ API OptimaAI Bot\n');

// –¢–µ—Å—Ç 1: –ë–µ–∑ API –∫–ª—é—á–∞
async function testWithoutApiKey() {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ API –∫–ª—é—á–∞...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç' }
    ]
  });
  
  return new Promise((resolve) => {
    const req = http.request('http://localhost:8000/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        console.log(`Response: ${data.substring(0, 200)}...`);
        resolve(res.statusCode === 200);
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
      resolve(false);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –¢–µ—Å—Ç 2: –°–æ —Å—Ç–∞—Ä—ã–º API –∫–ª—é—á–æ–º
async function testWithOldApiKey() {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ —Å—Ç–∞—Ä—ã–º API –∫–ª—é—á–æ–º...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç' }
    ]
  });
  
  return new Promise((resolve) => {
    const req = http.request('http://localhost:8000/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': 'your_optional_api_key_for_authentication',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        console.log(`Response: ${data.substring(0, 200)}...`);
        resolve(res.statusCode === 200);
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
      resolve(false);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –¢–µ—Å—Ç 3: –° –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º
async function testWithNewApiKey() {
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç' }
    ]
  });
  
  return new Promise((resolve) => {
    const req = http.request('http://localhost:8000/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': 'api_optimaai',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        console.log(`Response: ${data.substring(0, 200)}...`);
        resolve(res.statusCode === 200);
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
      resolve(false);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –¢–µ—Å—Ç 4: Health check
async function testHealth() {
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç health endpoint...');
  
  return new Promise((resolve) => {
    const req = http.request('http://localhost:8000/health', {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        console.log(`Response: ${data}`);
        resolve(res.statusCode === 200);
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
      resolve(false);
    });
    
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runDebugTests() {
  try {
    const healthOk = await testHealth();
    const withoutKeyOk = await testWithoutApiKey();
    const withOldKeyOk = await testWithOldApiKey();
    const withNewKeyOk = await testWithNewApiKey();
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏:');
    console.log(`Health endpoint: ${healthOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`–ë–µ–∑ API –∫–ª—é—á–∞: ${withoutKeyOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`–°—Ç–∞—Ä—ã–π API –∫–ª—é—á: ${withOldKeyOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`–ù–æ–≤—ã–π API –∫–ª—é—á: ${withNewKeyOk ? '‚úÖ' : '‚ùå'}`);
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (healthOk) {
      console.log('‚úÖ –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
    } else {
      console.log('‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: cd backend && python main.py');
    }
    
    if (withoutKeyOk) {
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫–ª—é—á–∞ - —É–±–µ—Ä–∏—Ç–µ API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } else if (withOldKeyOk) {
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á');
    } else if (withNewKeyOk) {
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º - –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    } else {
      console.log('‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏ —Å –æ–¥–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±—ç–∫–µ–Ω–¥');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error.message);
  }
}

runDebugTests();