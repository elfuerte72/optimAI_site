#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API —Å –∫–ª—é—á–æ–º api_optimaai
 */

const http = require('http');

console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API OptimaAI Bot\n');

// –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É
async function testBackendDirect() {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ OptimaAI' }
    ]
  });
  
  return new Promise((resolve, reject) => {
    const req = http.request('http://localhost:8000/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': 'api_optimaai',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            if (response.message && response.message.content) {
              console.log(`‚úÖ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${response.message.content.substring(0, 100)}..."`);
              resolve(true);
            } else {
              console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:`, response);
              resolve(false);
            }
          } catch (e) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, data);
            resolve(false);
          }
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${res.statusCode} - ${data}`);
          resolve(false);
        }
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É:', err.message);
      resolve(false);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –¢–µ—Å—Ç —á–µ—Ä–µ–∑ Next.js API Route
async function testNextjsApi() {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Next.js API Route...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è?' }
    ]
  });
  
  return new Promise((resolve, reject) => {
    const req = http.request('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            if (response.message && response.message.content) {
              console.log(`‚úÖ –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Next.js: "${response.message.content.substring(0, 100)}..."`);
              resolve(true);
            } else {
              console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:`, response);
              resolve(false);
            }
          } catch (e) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, data);
            resolve(false);
          }
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${res.statusCode} - ${data}`);
          resolve(false);
        }
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Next.js:', err.message);
      resolve(false);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  try {
    const backendOk = await testBackendDirect();
    const nextjsOk = await testNextjsApi();
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É: ${backendOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`–ß–µ—Ä–µ–∑ Next.js API Route: ${nextjsOk ? '‚úÖ' : '‚ùå'}`);
    
    if (backendOk && nextjsOk) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–æ–≤—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      console.log('\nüìù –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:');
      console.log('‚úÖ API –∫–ª—é—á api_optimaai —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('‚úÖ Endpoint /api/chat –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('‚úÖ Next.js –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã');
      console.log('‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã');
    } else {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.');
      console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      if (!backendOk) {
        console.log('1. –ó–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥: cd backend && python main.py');
        console.log('2. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ endpoint: http://localhost:8000/api/chat');
        console.log('3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ API –∫–ª—é—á: api_optimaai');
      }
      if (!nextjsOk) {
        console.log('4. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: npm run dev');
        console.log('5. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env.local');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

runTests();