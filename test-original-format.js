#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ INTEGRATION_GUIDE.md
 */

const http = require('http');

console.log('üîç –¢–µ—Å—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞\n');

// –¢–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
async function testOriginalFormat() {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–∑ INTEGRATION_GUIDE.md...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ Optima AI' }
    ],
    use_cache: false,
    stream: false
  });
  
  return new Promise((resolve) => {
    const req = http.request('http://localhost:8000/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': 'your_optional_api_key_for_authentication',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            console.log(`‚úÖ –£—Å–ø–µ—Ö! –û—Ç–≤–µ—Ç: "${response.message.content.substring(0, 100)}..."`);
            resolve(true);
          } catch (e) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${data.substring(0, 200)}...`);
            resolve(false);
          }
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ ${res.statusCode}: ${data.substring(0, 200)}...`);
          resolve(false);
        }
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
      resolve(false);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –¢–µ—Å—Ç –±–µ–∑ API –∫–ª—é—á–∞ –Ω–æ —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
async function testOriginalFormatNoKey() {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –±–µ–∑ API –∫–ª—é—á–∞...');
  
  const testMessage = JSON.stringify({
    messages: [
      { role: 'user', content: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ Optima AI' }
    ],
    use_cache: false,
    stream: false
  });
  
  return new Promise((resolve) => {
    const req = http.request('http://localhost:8000/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(testMessage)
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            console.log(`‚úÖ –£—Å–ø–µ—Ö! –û—Ç–≤–µ—Ç: "${response.message.content.substring(0, 100)}..."`);
            resolve(true);
          } catch (e) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${data.substring(0, 200)}...`);
            resolve(false);
          }
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ ${res.statusCode}: ${data.substring(0, 200)}...`);
          resolve(false);
        }
      });
    });
    
    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
      resolve(false);
    });
    
    req.write(testMessage);
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  try {
    const withKeyOk = await testOriginalFormat();
    const withoutKeyOk = await testOriginalFormatNoKey();
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`–° API –∫–ª—é—á–æ–º: ${withKeyOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`–ë–µ–∑ API –∫–ª—é—á–∞: ${withoutKeyOk ? '‚úÖ' : '‚ùå'}`);
    
    if (withKeyOk) {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á –∏ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞');
    } else if (withoutKeyOk) {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ: —É–±–µ—Ä–∏—Ç–µ API –∫–ª—é—á –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞');
    } else {
      console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

runTests();